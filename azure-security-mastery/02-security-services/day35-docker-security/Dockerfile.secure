# ============================================
# Secure Dockerfile - Production Ready
# Based on Day 33 Capstone Node.js App
# ============================================

# ============================================
# STAGE 1: Dependencies (Builder)
# ============================================
FROM node:18.17.1-alpine3.18 AS builder

# Security: Install only security updates
RUN apk update && \
    apk upgrade --no-cache && \
    rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy only package files first (leverage cache)
COPY package*.json ./

# Install production dependencies only
RUN npm ci --only=production && \
    npm cache clean --force

# ============================================
# STAGE 2: Production (Final Image)
# ============================================
FROM node:18.17.1-alpine3.18

# Metadata labels (good practice)
LABEL maintainer="yom@42student.fr" \
      version="1.0.0" \
      description="Secure Node.js application from Day 33 Capstone" \
      security.scan="required" \
      org.opencontainers.image.source="https://github.com/YomHubGG/azure-security-mastery"

# Security: Install only security updates
RUN apk update && \
    apk upgrade --no-cache && \
    rm -rf /var/cache/apk/*

# Security: Create non-root user
# - UID/GID 1001 (standard non-root)
# - No shell access (-s /sbin/nologin)
# - System user (-S)
RUN addgroup -g 1001 -S nodejs && \
    adduser -S -u 1001 -G nodejs -s /sbin/nologin nodejs

# Set working directory
WORKDIR /app

# Copy dependencies from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy application code
COPY --chown=nodejs:nodejs . .

# Security: Remove unnecessary files
RUN rm -rf \
    .git \
    .github \
    tests \
    *.md \
    .env.example \
    .gitignore \
    .dockerignore

# Security: Set read-only filesystem for app files
RUN chmod -R 555 /app && \
    chmod -R 755 /app/node_modules

# Security: Create minimal writable directory for temp files
RUN mkdir -p /tmp/app && \
    chown -R nodejs:nodejs /tmp/app && \
    chmod 700 /tmp/app

# Switch to non-root user
USER nodejs

# Expose port (documentation only, doesn't actually publish)
EXPOSE 3000

# Health check (container orchestration can monitor)
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); });"

# Security: Use array syntax (not shell form)
# This prevents shell injection attacks
CMD ["node", "server.js"]

# ============================================
# Security Features Implemented:
# ============================================
# ✅ Multi-stage build (reduces final image size)
# ✅ Alpine base (5MB vs 900MB Ubuntu)
# ✅ Non-root user (UID 1001)
# ✅ Read-only filesystem for app code
# ✅ Pinned versions (node:18.17.1-alpine3.18)
# ✅ Security updates applied (apk upgrade)
# ✅ Minimal attack surface (removed dev files)
# ✅ Health check for monitoring
# ✅ No secrets in image (use environment variables)
# ✅ Proper file permissions (555 for code, 700 for temp)
# ✅ No shell access for nodejs user
# ============================================

# ============================================
# Build Commands:
# ============================================
# Build image:
#   podman build -f Dockerfile.secure -t secure-app:1.0.0 .
#
# Run container:
#   podman run -d -p 3000:3000 \
#     -e NODE_ENV=production \
#     -e PORT=3000 \
#     --name secure-app \
#     secure-app:1.0.0
#
# Test health:
#   curl http://localhost:3000/health
#
# Check logs:
#   podman logs secure-app
#
# Stop & remove:
#   podman stop secure-app && podman rm secure-app
# ============================================

# ============================================
# Security Scanning:
# ============================================
# Trivy:
#   trivy image secure-app:1.0.0
#
# Podman scan (if available):
#   podman scan secure-app:1.0.0
#
# Dockle (linter):
#   dockle secure-app:1.0.0
# ============================================
