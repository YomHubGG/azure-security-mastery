name: 'Secure DevSecOps Pipeline - Day 45 Advanced'

on:
  push:
    branches: [ main ]
    paths:
      - 'azure-security-mastery/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger for testing

permissions:
  contents: read
  security-events: write
  id-token: write  # Required for OIDC authentication
  issues: write    # Create issues for security findings

env:
  AZURE_RESOURCE_GROUP: 'rg-learning-day1'
  CONTAINER_NAME: 'secure-app'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'ghcr.io/${{ github.repository_owner }}/secure-app'

jobs:
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB 1: SECRET SCANNING & CODE ANALYSIS
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  security-scan:
    name: 'üîí Security Scanning'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'üì• Checkout Repository'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
        
    - name: 'üîê Scan for Leaked Secrets (Gitleaks)'
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_ENABLE_SUMMARY: true
        
    - name: 'üõ°Ô∏è Initialize CodeQL Analysis'
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python
        queries: security-extended, security-and-quality
        config: |
          paths:
            - azure-security-mastery
          paths-ignore:
            - '**/node_modules'
            - '**/test/**'
            - '**/*.md'
        
    - name: 'üì¶ Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'azure-security-mastery/02-security-services/day35-docker-security/app/package-lock.json'
        
    - name: 'üîç Dependency Vulnerability Scan (npm audit)'
      continue-on-error: true  # Don't fail job, just report
      run: |
        cd azure-security-mastery/02-security-services/day35-docker-security/app
        echo "üì¶ Installing dependencies..."
        npm ci
        
        echo "üîç Running npm audit..."
        npm audit --audit-level=moderate --json > npm-audit-results.json || true
        
        echo "üìä Audit Summary:"
        npm audit --audit-level=moderate || echo "‚ö†Ô∏è  Vulnerabilities found (see details above)"
        
    - name: 'üìä Upload npm Audit Results'
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: azure-security-mastery/02-security-services/day35-docker-security/app/npm-audit-results.json
        retention-days: 30
        
    - name: 'üî¨ Perform CodeQL Analysis'
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB 2: CONTAINER BUILD & VULNERABILITY SCANNING
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  build-and-scan:
    name: 'üê≥ Build & Scan Container'
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: 'üì• Checkout Repository'
      uses: actions/checkout@v4
      
    - name: 'üê≥ Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3
      
    - name: 'üìù Extract Docker Metadata'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix={{branch}}-
          type=ref,event=branch
          type=semver,pattern={{version}}
          
    - name: 'üî® Build Container Image'
      uses: docker/build-push-action@v5
      with:
        context: azure-security-mastery/02-security-services/day35-docker-security
        file: azure-security-mastery/02-security-services/day35-docker-security/Dockerfile
        push: false
        load: true  # Load image for scanning
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 'üîç Scan Image with Trivy (Critical & High)'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'  # Don't fail on vulnerabilities for now
        
    - name: 'üìä Upload Trivy Results to GitHub Security'
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-container-scan'
        
    - name: 'üìã Generate Software Bill of Materials (SBOM)'
      uses: anchore/sbom-action@v0
      with:
        image: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
        format: 'spdx-json'
        output-file: 'sbom.spdx.json'
        
    - name: 'üì§ Upload SBOM Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom.spdx.json
        retention-days: 90  # Keep SBOMs for compliance
        
    - name: 'üîç Trivy Detailed Report (All Severities)'
      run: |
        echo "üìä Complete Vulnerability Report:"
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          --severity CRITICAL,HIGH,MEDIUM,LOW \
          --format table \
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
          
    - name: '‚úÖ Image Build Summary'
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üê≥ Container Image Build Complete"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "Registry: GitHub Container Registry (GHCR)"
        echo "SBOM Generated: ‚úÖ (SPDX format)"
        echo "Security Scan: ‚úÖ (Trivy)"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB 3: DEPLOY TO AZURE (only on main branch)
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  deploy:
    name: 'üöÄ Deploy to Azure'
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # Uncomment below to require manual approval:
    # environment: production
    
    steps:
    - name: 'üì• Checkout Repository'
      uses: actions/checkout@v4
      
    - name: 'üîê Azure Login via OIDC (No Secrets!)'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: '‚úÖ Verify Azure Authentication'
      run: |
        echo "üîê OIDC Authentication Successful!"
        echo "Subscription: $(az account show --query name -o tsv)"
        echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        
    - name: 'üöÄ Deploy to Azure Container Instances'
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}-${{ github.run_number }}"
        DNS_LABEL="secure-app-day45-${{ github.run_number }}"
        
        echo "üöÄ Deploying container: $CONTAINER_NAME"
        
        az containerinstance create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name $CONTAINER_NAME \
          --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --cpu 0.5 \
          --memory 0.5 \
          --ports 3000 \
          --dns-name-label $DNS_LABEL \
          --restart-policy OnFailure \
          --environment-variables \
            NODE_ENV=production \
            DEPLOYMENT_ID=${{ github.run_number }} \
            GIT_SHA=${{ github.sha }} \
          --no-wait  # Don't wait for completion (speed up pipeline)
          
        echo "‚úÖ Deployment initiated!"
        echo "Container Name: $CONTAINER_NAME"
        echo "DNS: $DNS_LABEL.westeurope.azurecontainer.io"
        
    - name: '‚è±Ô∏è Wait for Container Provisioning'
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}-${{ github.run_number }}"
        
        echo "‚è±Ô∏è  Waiting for container to be ready..."
        for i in {1..12}; do
          STATE=$(az containerinstance show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name $CONTAINER_NAME \
            --query instanceView.state -o tsv 2>/dev/null || echo "Provisioning")
          
          echo "Attempt $i/12: State = $STATE"
          
          if [ "$STATE" == "Running" ]; then
            echo "‚úÖ Container is running!"
            break
          fi
          
          if [ $i -eq 12 ]; then
            echo "‚ö†Ô∏è  Container not ready after 60s, continuing anyway..."
          fi
          
          sleep 5
        done
        
    - name: 'üè• Health Check'
      continue-on-error: true
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}-${{ github.run_number }}"
        DNS_LABEL="secure-app-day45-${{ github.run_number }}"
        FQDN="$DNS_LABEL.westeurope.azurecontainer.io"
        
        echo "üè• Performing health check..."
        echo "Endpoint: http://$FQDN:3000/"
        
        sleep 10  # Give app time to start
        
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://$FQDN:3000/ || echo "000")
        
        if [ "$HTTP_CODE" == "200" ]; then
          echo "‚úÖ Health check PASSED! (HTTP $HTTP_CODE)"
          echo "üåê Application available at: http://$FQDN:3000/"
        else
          echo "‚ö†Ô∏è  Health check returned HTTP $HTTP_CODE"
          echo "Container may still be starting up..."
        fi
        
    - name: 'üìä Deployment Summary'
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}-${{ github.run_number }}"
        DNS_LABEL="secure-app-day45-${{ github.run_number }}"
        
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üéâ Deployment Complete!"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Container: $CONTAINER_NAME"
        echo "URL: http://$DNS_LABEL.westeurope.azurecontainer.io:3000/"
        echo "Image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "Run Number: ${{ github.run_number }}"
        echo "Git SHA: ${{ github.sha }}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""
        echo "üßπ To clean up after testing:"
        echo "az containerinstance delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name $CONTAINER_NAME --yes"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
    - name: 'üíæ Save Deployment Info'
      run: |
        CONTAINER_NAME="${{ env.CONTAINER_NAME }}-${{ github.run_number }}"
        DNS_LABEL="secure-app-day45-${{ github.run_number }}"
        
        cat > deployment-info.json << EOF
        {
          "container_name": "$CONTAINER_NAME",
          "url": "http://$DNS_LABEL.westeurope.azurecontainer.io:3000/",
          "image": "${{ env.IMAGE_NAME }}:${{ github.sha }}",
          "git_sha": "${{ github.sha }}",
          "run_number": "${{ github.run_number }}",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "resource_group": "${{ env.AZURE_RESOURCE_GROUP }}"
        }
        EOF
        
        cat deployment-info.json
        
    - name: 'üì§ Upload Deployment Info'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info-${{ github.run_number }}
        path: deployment-info.json
        retention-days: 30

  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  # JOB 4: SECURITY SUMMARY
  # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  security-summary:
    name: 'üìä Security Summary'
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-scan]
    if: always()
    
    steps:
    - name: 'üìä Generate Security Report'
      run: |
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "üîí Security Scanning Summary"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""
        echo "‚úÖ Gitleaks - Secret Scanning"
        echo "‚úÖ CodeQL - Static Analysis (SAST)"
        echo "‚úÖ npm audit - Dependency Vulnerabilities"
        echo "‚úÖ Trivy - Container Image Scanning"
        echo "‚úÖ SBOM - Software Bill of Materials"
        echo ""
        echo "üìä View detailed results in:"
        echo "  ‚Üí Security tab: github.com/${{ github.repository }}/security"
        echo "  ‚Üí Artifacts: npm-audit-results, sbom-${{ github.sha }}"
        echo ""
        echo "üîê Authentication Method: OIDC (No stored secrets!)"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
